
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Section 5, Figure 2
> # Simulated comparison with t-test
> 
> library(doSNOW)
Loading required package: foreach
Loading required package: iterators
Loading required package: snow
> library(itertools)
> 
> # Symmetric sample sizes ----------------------------------
> 
> # non-symmetric sample sizes ------------------------------
> nx <- c(50, 200, 350)
> nLen <- length(nx)
> ny <- 500
> 
> mux <- c(0.75, 1)
> muLen <- length(mux)
> 
> M <- 100 # M is number of repetitions for each scenario
> 
> nClust <- 6
> 
> params <- data.frame(nx=rep(nx, each=muLen*M),
+     mux=rep(mux, each=M)
+ )
> 
> simFun <- function(sub){
+ 
+   library(fastPerm)
+   library(EXPERT)
+ 
+   sub$pt <- NA
+   sub$pPred <- NA
+   sub$pAsymNorm <- NA
+   sub$pAsymT <- NA
+   sub$pExpert6 <- NA
+ 
+   sub$timePred <- NA
+   sub$timeExpert6 <- NA
+ 
+   sub$mStop <- NA
+   sub$EmStop <- NA
+ 
+   sub$maxErrorExpert6 <- NA
+ 
+   for (i in 1:nrow(sub)){
+ 
+     nx <- sub$nx[i]
+     x <- rnorm(n = nx, mean = sub$mux[i], sd=1)
+     y <- rnorm(n = ny, mean = 0, sd=1)
+ 
+     sub$pt[i] <- t.test(x, y, var.equal = TRUE)$p.value
+ 
+     sub$timePred[i] <- system.time(fp <- 
+       fastPerm(x, y, testStat = diffMean))[3]
+     sub$pPred[i] <- fp$pPred
+     sub$mStop[i] <- fp$mStop
+ 
+     sub$EmStop[i] <- mStopDiffMean(x,y)
+ 
+     fpAsym <- fastPermAsym(x,y, testStat=diffMean)
+     sub$pAsymNorm[i] <- fpAsym$pNorm
+     sub$pAsymT[i] <- fpAsym$pT
+     
+     # using EXPERT package
+     data.input<-list(x=x, y=y)
+     t.obs<-t.test.statistic(data.input)
+ 
+     try({
+       sub$timeExpert6[i] <- 
+         system.time(res6 <- SAMC.adapt(data.input, t.obs, t.start=0,
+           n.iter.1=5e4, n.iter.2=1e6, 
+           n.region.1=101, n.region.2=301,
+           prop.change=0.05, gain.factor.t0=1000,
+           fun.test.statistic=t.test.statistic,
+           fun.proposal=proposal.permute.vector)
+         )[3]
+       # The estimated p-value
+       sub$pExpert6[i] <- res6$p.value
+       sub$maxErrorExpert6[i] <- maxError(res6)
+       })
+ 
+   }
+ 
+   return(sub)  
+ }
> 
> cl <- makeCluster(nClust, type="SOCK")
> registerDoSNOW(cl)
> 
> blocks <- isplitIndices(nrow(params), chunks=nClust)
> 
> system.time(nonSymResults <- foreach(j=blocks, .combine=rbind) %dopar% {
+                    return(simFun(params[j,]))
+                  })
     user    system   elapsed 
    0.109     0.013 42093.459 
> 
> stopCluster(cl)
> 
> save(nonSymResults, file ="nonSymResultsDiff_parallel.RData")
> 
> proc.time()
     user    system   elapsed 
    0.734     0.108 42096.935 
