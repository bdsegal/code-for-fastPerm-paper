
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Simulations comparing proposed algorithm to SAMC
> # exponential data, unequal sample size
> 
> # arg <- commandArgs(TRUE)
> 
> library(doSNOW)
Loading required package: foreach
Loading required package: iterators
Loading required package: snow
> library(itertools)
> 
> 
> # Symmetric sample sizes ----------------------------------
> nx <- c(50, 200, 350)
> nLen <- length(nx)
> ny <- 500
> 
> ratey <- c(1.75, 2.25)
> rateLen <- length(ratey)
> 
> M <- 100 # M is number of repetitions for each scenario
> 
> nClust <- 6
> 
> params <- data.frame(nx=rep(nx, each=rateLen*M),
+     ratey=rep(ratey, each=M)
+ )
> 
> simFun <- function(sub){
+ 
+   library(fastPerm)
+   library(EXPERT)
+   library(PearsonDS)
+ 
+   ratio.test.statistic <- function(data.input){
+       xbar <- mean(data.input$x)
+       ybar <- mean(data.input$y)
+ 
+       max(xbar/ybar, ybar/xbar)
+   }
+ 
+   sub$pBeta <- NA
+   sub$pPred <- NA
+   sub$pAsymNorm <- NA
+   sub$pAsymT <- NA
+   sub$pExpert6 <- NA
+ 
+   sub$timePred <- NA
+   sub$timeExpert6 <- NA
+ 
+   sub$mStop <- NA
+   sub$EmStop <- NA
+ 
+   sub$maxErrorExpert6 <- NA
+ 
+   for (i in 1:nrow(sub)){
+ 
+     nx <- sub$nx[i]
+     x <- rexp(n = nx, rate = 1)
+     y <- rexp(n = ny, rate = sub$ratey[i])
+ 
+     # beta prime distribution
+     t0 <- max(mean(x) / mean(y), mean(y) / mean(x))
+     sub$pBeta[i] <- ppearsonVI(t0, a = nx, b = ny, scale = ny/nx, location = 0,
+                                lower.tail = FALSE)+
+                     ppearsonVI(t0, a = ny, b = nx, scale = nx/ny, location = 0,
+                                lower.tail = FALSE)
+ 
+     sub$timePred[i] <- system.time(fp <- 
+       fastPerm(x, y, testStat = ratioMean)
+       )[3]
+     sub$pPred[i] <- fp$pPred
+     sub$mStop[i] <- fp$mStop
+ 
+     sub$EmStop[i] <- mStopRatioMean(x,y)
+ 
+     fpAsym <- fastPermAsym(x,y, testStat=ratioMean)
+     sub$pAsymNorm[i] <- fpAsym$pNorm
+     sub$pAsymT[i] <- fpAsym$pT
+     
+     # using EXPERT package
+     data.input<-list(x=x, y=y)
+     t.obs<-ratio.test.statistic(data.input)
+ 
+     try({
+       sub$timeExpert6[i] <- 
+         system.time(res6 <- SAMC.adapt(data.input, t.obs, t.start=0,
+           n.iter.1=5e4, n.iter.2=1e6, 
+           n.region.1=101, n.region.2=301,
+           prop.change=0.05, gain.factor.t0=1000,
+           fun.test.statistic=ratio.test.statistic,
+           fun.proposal=proposal.permute.vector)
+         )[3]
+       # The estimated p-value
+       sub$pExpert6[i] <- res6$p.value
+       sub$maxErrorExpert6[i] <- maxError(res6)
+       })
+ 
+   }
+ 
+   return(sub)  
+ }
> 
> cl <- makeCluster(nClust, type="SOCK")
> registerDoSNOW(cl)
> 
> blocks <- isplitIndices(nrow(params), chunks=nClust)
> 
> system.time(nonSymResults <- foreach(j=blocks, .combine=rbind) %dopar% {
+                    return(simFun(params[j,]))
+                  })
     user    system   elapsed 
    0.079     0.005 24739.355 
> 
> stopCluster(cl)
> 
> save(nonSymResults, file ="nonSymResultsExp_parallel.RData")
> 
> 
> proc.time()
     user    system   elapsed 
    0.330     0.078 24741.088 
